# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:

        def helper(node):
            if not node.left:
                return node.right
            elif not node.right:
                return node.left

            parent = node
            curr = node.right

            if curr.left is None:
                node.val = curr.val
                node.right = curr.right
            else:
                while curr.left:
                    parent = curr
                    curr = curr.left
                node.val = curr.val
                parent.left = curr.right

            return node

        if root is None:
            return None

        if root.val == key:
            return helper(root)

        curr = root
        while curr:
            if key < curr.val:
                if curr.left and curr.left.val == key:
                    curr.left = helper(curr.left)
                    break
                else:
                    curr = curr.left
            else:
                if curr.right and curr.right.val == key:
                    curr.right = helper(curr.right)
                    break
                else:
                    curr = curr.right

        return root
