# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        
        if not root:
            return []
        
        queue = deque([(root,0,0)])
        node_map = defaultdict(list)

        while queue:
            node,row,col = queue.popleft()
            node_map[col].append((row,node.val))

            if node.left:
                queue.append((node.left,row+1,col-1))
            if node.right:
                queue.append((node.right,row+1,col+1))
        
        result = []
        for col in sorted(node_map.keys()):
            col_node = sorted(node_map[col])
            result.append([val for row,val in col_node])
        return result
