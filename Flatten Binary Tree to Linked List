# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        # self.prev = None
        # def f(node):
        #     if node is None:
        #         return
        #     f(node.right)
        #     f(node.left)
        #     node.right = self.prev
        #     node.left = None
        #     self.prev = node
        # f(root)

        curr = root
        while curr is not None:
            if curr.left is not None:
                prev = curr.left
                while prev.right :
                    prev = prev.right
                prev.right = curr.right
                curr.right = curr.left
                curr.left = None
            curr = curr.right

        
